##
#  CMake script
##

# Set the name of the project and target:
SET(TARGET "tffo")

# Declare all source files the target consists of:
SET(TARGET_SRC
  ${TARGET}.cc
  # You can specify additional files here!
  )

# Usually, you will not need to modify anything beyond this point...

CMAKE_MINIMUM_REQUIRED(VERSION 2.8.8)

FIND_PACKAGE(deal.II 8.0 QUIET
  HINTS ${deal.II_DIR} ${DEAL_II_DIR} ../ ../../ $ENV{DEAL_II_DIR}
  )
IF(NOT ${deal.II_FOUND})
  MESSAGE(FATAL_ERROR "\n"
    "*** Could not locate deal.II. ***\n\n"
    "You may want to either pass a flag -DDEAL_II_DIR=/path/to/deal.II to cmake\n"
    "or set an environment variable \"DEAL_II_DIR\" that contains this path."
    )
ENDIF()

#SET(FFTW_INCLUDE_DIRS "/usr/include")
#SET(FFTW_LIBRARIES "libfftw3")
#FIND_PACKAGE(fftw 3.0 REQUIRED)
#INCLUDE_DIRECTORIES(${FFTW_INCLUDE_DIRS})
#ADD_EXECUTABLE(${TARGET} ${TARGET}.cc)
#DEAL_II_SETUP_TARGET(mycode)
#TARGET_LINK_LIBRARIES(${TARGET} ${FFTW_LIBRARIES})

DEAL_II_INITIALIZE_CACHED_VARIABLES()
PROJECT(${TARGET})

###DEAL_II_INVOKE_AUTOPILOT()

#FIND_PACKAGE(mitmojco 1.1 REQUIRED NO_MODULE)
INCLUDE_DIRECTORIES(/usr/local/include)
INCLUDE_DIRECTORIES(~/mitmojco/include) ### for install in local home directory

ADD_EXECUTABLE(${TARGET} ${TARGET_SRC})
DEAL_II_SETUP_TARGET(${TARGET})

find_package(OpenMP REQUIRED)
enable_language(C)
# https://cmake.org/cmake/help/v3.0/module/FindOpenMP.html
#message(${OpenMP_C_FLAGS})
if(OpenMP_C_FLAGS)
  set_target_properties(${TARGET} PROPERTIES
    LINK_FLAGS "${OpenMP_C_FLAGS}")
endif()

TARGET_LINK_LIBRARIES(${TARGET} mitmojco ${catkin_LIBRARIES})
TARGET_LINK_LIBRARIES(${TARGET} ~/mitmojco/build/libmitmojco.so ${catkin_LIBRARIES}) ### for install in local home directory

#SET(TARGET_RUN ${TARGET})
#IF(NOT "${TARGET_RUN}" STREQUAL "")
#    ADD_CUSTOM_TARGET(run
#      COMMAND ${_command}
#      DEPENDS ${TARGET}
#      COMMENT "Run ${TARGET} with ${CMAKE_BUILD_TYPE} configuration"
#      )
#    SET(_run_targets
#      "#      ${_make_command} run            - to (compile, link and) run the program\n"
#      )
#ENDIF()

ADD_CUSTOM_TARGET(debug
    COMMAND ${CMAKE_COMMAND} -DCMAKE_BUILD_TYPE=Debug ${CMAKE_SOURCE_DIR}
    COMMAND ${CMAKE_COMMAND} --build ${CMAKE_BINARY_DIR} --target all
    COMMENT "Switch CMAKE_BUILD_TYPE to Debug"
    )

ADD_CUSTOM_TARGET(release
    COMMAND ${CMAKE_COMMAND} -DCMAKE_BUILD_TYPE=Release ${CMAKE_SOURCE_DIR}
    COMMAND ${CMAKE_COMMAND} --build ${CMAKE_BINARY_DIR} --target all
    COMMENT "Switch CMAKE_BUILD_TYPE to Release"
)

# And another custom target to clean up all files generated by the program:
IF("${CLEAN_UP_FILES}" STREQUAL "")
    SET(CLEAN_UP_FILES *.log *.gmv *.gnuplot *.gpl *.eps *.pov *.vtk *.ucd *.d2)
ENDIF()
ADD_CUSTOM_TARGET(runclean
    COMMAND ${CMAKE_COMMAND} -E remove ${CLEAN_UP_FILES}
    COMMENT "runclean invoked"
    )

# Define a distclean target to remove every generated file:
ADD_CUSTOM_TARGET(distclean
    COMMAND ${CMAKE_COMMAND} --build ${CMAKE_BINARY_DIR} --target clean
    COMMAND ${CMAKE_COMMAND} --build ${CMAKE_BINARY_DIR} --target runclean
    COMMAND ${CMAKE_COMMAND} -E remove_directory CMakeFiles
    COMMAND ${CMAKE_COMMAND} -E remove
      CMakeCache.txt cmake_install.cmake Makefile
      build.ninja rules.ninja .ninja_deps .ninja_log
    COMMENT "distclean invoked"
    )

